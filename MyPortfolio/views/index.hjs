<!DOCTYPE html>
<html>
  <head>
    <title><% title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/site.css' />
    <!-- <link rel='stylesheet' href='/stylesheets/bootstrap.min.css'/> -->
    <link rel='stylesheet' href='/stylesheets/font-awesome.min.css'/>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
    <script src="//code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
    <script src="/javascripts/threejs.min.js"></script>
    <script>var page="<% title %>"</script>
  </head>
  <style>
    canvas{
      width:100%;
      height:100%;
    }
    .navbar{
      margin:0;
    }
    .center-container{
      position:absolute;
      
    }
    .center-container h1,p{
      color:white;
    }
  </style>
  <body>
    <%> layout%>


    <div class="center-container">
      <h1>John Moon</h1>
      <p style="font-weight:bold">Software Engineer @ Phenomenex<p>
      <p>Status: Student @ UCI</p>
      <p>Major: Computer Science</p>
      <p>Specialization: Artifical Intelligence</p>
    </div>

    <div style="text-align:center;">
      <!-- <canvas></canvas> -->
    </div>
  </body>
</html>

<script>
  var scene = new THREE.Scene();
  var camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);
  var renderer = new THREE.WebGLRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  
  camera.position.z = 400;
  camera.position.y = -300;
  camera.position.x = 0;
  camera.rotation.x = .70;
  var material =  new THREE.MeshBasicMaterial({ color: 0xF0C400, wireframe: true});
  material.vertexColors = THREE.VertexColors;

  var geometry = new THREE.BoxGeometry(100, 100, 100);
  geometry.colorsNeedUpdate = true;
  geometry.faces[ 0 ].vertexColors[ 1 ] = new THREE.Color( 0xff0000 );
  var cube = new THREE.Mesh(geometry, material);
  scene.add(cube);

  var color_x = Math.random();
  var color_y = Math.random();
  var color_z = Math.random();
  var move_x = .01 * Math.random();
  var move_y = .01 * Math.random();
  var move_z = .01 * Math.random();
  setInterval(function(){

      color_x = 255*Math.random();

      color_y = 255*Math.random();
    
      color_z = 255*Math.random();
    

  }, 7000)
  var render = function(){
 

    cube.rotation.x += .01;
    cube.rotation.y += .04;
    cube.rotation.z += .01;

    for(var i in geometry.faces){
      //console.log(geometry.faces[i]);
      geometry.faces[i].color.setRGB(color_x, color_y, color_z);
    }
   // geometry.faces[ 0 ].vertexColors[ 1 ].setHSL( Math.random(), 0.5, 0.5 );
    geometry.colorsNeedUpdate = true;
      
    renderer.render(scene, camera);

    requestAnimationFrame(render);
  }

  $(window).resize(function(){
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(window.innerWidth, window.innerHeight);
  })
  render();
  var page = '<% title %>'
  var screen_width = 1000;
  var screen_height = 900;
  var starting_x = 250;
  var starting_y = 250;
  var iteration = 5;
  var distance = 5;
  var rad = 0;

  function rotatex(x1 ,x2 ,y1 ,y2 ,theta) {
      var x=((x2-x1)*Math.cos(theta))-((y2-y1)*Math.sin(theta))+x1;
      return x;
  }
  function rotatey(x1, x2, y1, y2, theta){
      var y=((x2-x1)*Math.sin(theta))+((y2-y1)*Math.cos(theta))+y1;
      return y;
  }
  function Next(context){
      for(var x = 0; x < iteration ; x++){
        for(var y = 0; y < iteration; y++){
          for(var z = 0; z < iteration; z++){
            var next_x = rotatex(starting_x, starting_x + (distance*z) + (x*distance), starting_y, starting_y + (distance*y) + (x*distance), rad);

            var next_y = rotatey(starting_x, starting_x + (distance*z) + (x*distance), starting_y, starting_y + (distance*y) + (x*distance), rad);

            DrawCircle(next_x, next_y, context);
          }
        }
      }
  }
  function DrawBackground(context){
    context.beginPath();
    context.rect(0, 0, screen_width, screen_height);
    context.fillStyle = 'black';
    context.fill();
    context.lineWidth = 1;
    context.strokeStyle = 'transparent';
    context.stroke();
  }
  function DrawCircle(x, y, context){
      context.beginPath();
      context.arc(x, y,1 ,0, 2*Math.PI);
      context.fillStyle = 'white';
      context.fill();
      context.stroke();
  }
</script>
